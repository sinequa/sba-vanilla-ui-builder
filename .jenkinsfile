// ### Environment ###
properties([
    parameters([
        string(name:"SBA_VERSION",  defaultValue: "", description: "version of sba", trim: true),
        string(name:"SBA_NODE", defaultValue: "${env.SBA_NODE}", description: "execution node name", trim: true)
    ]),
    disableConcurrentBuilds()
])

// Get mail parameters from jenkins env vars
url           = "${env.NPM_SERVER_URL}"
npm_user      = "${env.NPM_USER}"
npm_pass      = "${env.NPM_PASS}"
npm_mail      = "${env.NPM_MAIL}"

// get job variables from job parameters
sba_version   = "${params.SBA_VERSION}"
// .npmrc variables for verdaccio connection
scope  = "@sinequa"
fnpmrc = '.npmrc'
anpmrc = ['node-options="--max-old-space-size=8192"', "always-auth=true", "registry=${url}/", "scope=${scope}"]

// Pipeline workflow (main)
node (params.SBA_NODE) {

    currentBuild.result = "SUCCESS"
    // if param sba_version is not null, the call comes from sba-internal
    def modeCallFromSbaInternal = false
    if (sba_version.length() > 0) {
        echo "SBA_VERSION should comming from build of sba-internal"
        modeCallFromSbaInternal = true
    }
    try {
    
        // get the source code
        checkout scm
        
        // load jenkins functions
        def rootDir = pwd()
        def jf = load "${rootDir}/.jenkins_function.groovy"
        def currentBranch = jf.findBranchNumber()
        // sba_version : commes from sba-internal just build before 
        echo "sba_version: ${sba_version}"
        
        stage('Clean') {
            // delete dependency modules 
            def nmfolder = "node_modules"
            bat "if exist ${nmfolder} ( rmdir /s /q ${nmfolder} )"
        }
        
        stage('Create user') {
            // create user for verdaccio
            bat "npm-cli-login -u ${npm_user} -p ${npm_pass} -e ${npm_mail} -r ${url} -s ${scope} --config-path ${fnpmrc}"
            // add connection infos in .npmrc file
            jf.appendFile(fnpmrc, anpmrc)
            // check the connection
            bat "npm whoami"
        }
    
        // Validate app fired
        if (modeCallFromSbaInternal) {
            // Validate app fired on merge event
            stage('Update package') {
                // update package.json with version
                jf.updatePackage(sba_version)
            }
        }
        // install dependencies, fallback to official registry
        // and retry if get on internal repo fails
        stage('NPM Install') {
            def ret = bat (script: "npm ci --legacy-peer-deps", returnStatus: true)
            if (ret) {
                // set .npmrc file as original
                // check registry
                // install again
                bat """
                  call git restore .npmrc
                  call npm config get registry
                  call npm ci --legacy-peer-deps
                """
            }
        }
        
        // Build the app
        stage('Build initial') {
            bat """
              call npm run build
            """
        }
        // Build the app with config-standard
        stage('Build config-standard') {
            bat """
              call npm run make-static -- --config=projects/vanilla/e2e/config-standard.json
              call npm run build
            """
        }
        // Build the app with config-custom
        stage('Build config-custom') {
            bat """
              call npm run make-static -- --config=projects/vanilla/e2e/config-custom.json
              call npm run build
            """
        }
    
    } catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    } finally {
        // should no be blocker
        if ( modeCallFromSbaInternal && (currentBuild.result == "FAILURE")) {
            currentBuild.result = "UNSTABLE"
        }
    }
}
