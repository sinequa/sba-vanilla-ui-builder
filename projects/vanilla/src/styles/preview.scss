
@import "bootstrap/scss/_functions";
@import "bootstrap/scss/_variables";
@import "sass-color-helpers/stylesheets/_color-helpers";
@import "metadata";

$extracts-color: lemonchiffon !default;
$extractslocations-color: $extracts-color !default;
$passages-color: transparent;
$matchlocations-color: yellow !default;
$matchlocations-border: 1px solid rgba(0,0,0, 0.125);

$extracts-highlights:(
    extracts: (
        main-color: $extracts-color,
        background-color: $extracts-color,
        color: black
    ),
    extractslocations: (
        main-color: $extractslocations-color,
        background-color: $extractslocations-color,
        color: black,
        border: $matchlocations-border
    ),
    matchingpassages: (
      main-color: $passages-color,
      background-color: $passages-color,
      color: black
    )
);

$terms-highlights: (
    matchlocations: (
        main-color: $matchlocations-color,
        background-color: $matchlocations-color,
        color: black,
        border: $matchlocations-border
    )
);

$highlights: map-merge(map-merge($extracts-highlights, $terms-highlights), $metadata);


@function get-highlight-color($name) {
    $highlight: map-get($highlights, $name);
    $color: map-get($highlight, "main-color");
    @return $color;
}

@mixin highlight($term) {
    $highlight: map-get($highlights, $term);
    $color: map-get($highlight, "color");
    $background-color: map-get($highlight, "background-color");
    $border: map-get($highlight, "border");

    span.#{$term}:not(.sq-inactive) {
        color: $color !important;
        background-color: $background-color !important;
    }
    @if $border != null {
        .categoryIcon span.#{$term}, .currentCategories span.#{$term} {
            border: $border;
        }
    }
}

@mixin svgHighlight($term) {
    $highlight: map-get($highlights, $term);
    $color: map-get($highlight, "color");
    $background-color: map-get($highlight, "background-color");
    $border: map-get($highlight, "border");
    @if $color != null {
        tspan.#{$term}:not(.sq-inactive) {
            fill: $color;
            font-weight: bold;
        }
    }
    @if $background-color == null {
        $background-color: rgba(0,0,0,0)
    }
    rect.#{$term}:not(.sq-inactive) {
        fill: $background-color;
    }
    @if $border != null {
        line.#{$term} {
            border: $border;
        }
    }
}

@mixin simpleHighlight($term) {
    $tag-cloud: map-get($highlights, $term);
    $color: map-get($tag-cloud, "main-color");

    .sq-metadata-color-#{$term} {
        color: $color !important;

        &:hover {
            background-color: lighten($color, 55%) !important;
            @if lighten($color, 55%) == white {
              background-color: lighten($color, 20%) !important;
            }
            opacity: 0.7 !important;
          }
    }

    .sq-metadata-color-#{$term}.sq-metadata-border {
      border: 1px solid $color !important;
    }
}

// Actually generate highlight rules

@each $name in map-keys($highlights) {
    @include highlight($name);
    @include svgHighlight($name);
    @include simpleHighlight($name);
}

// overrides preview's legacy css

// pdfAdvanced
.stl_ {
    content-visibility: auto;
    display: inline-block;
    background-color: white;
    border: solid 1px lightgrey;
    margin: 24px;
}

// sinequePdfToHtml
// add a shadow on page navigator
body.bd {
    background-color: #eee;

    > div.ph {
        box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);
    }

    // as style is inline, this selector is very specific to overrides it
    > div:not(.ph, .phe) {
        margin: 24px;
        content-visibility: visible;

        > img {
            background-color: white;
            border: 1px solid lightgrey;
            box-shadow: 0 4px 8px 0 rgb(0 0 0 / 20%), 0 6px 20px 0 rgb(0 0 0 / 19%);
            margin-bottom: 16px;
            margin-right: 16px;
        }

    }
}

sq-preview-minimap {
    .minimap {
        width: 15px;
        position: fixed;
        top: 0px;
        right: 3px;
        height: 100%;
        z-index: 100;

        .minimap-section {
            width: 100%;
            height: 1px;
            position: absolute;
            border: 1px solid orange;
            background-color: yellow;
            cursor: pointer;

            &.minimap-passage {
                border-color: #0B75FF;
                background-color: transparent;
            }
        }
    }
}


// Currently selected highlights
.sq-current {
    border: 2px dashed rgb(5,5,5) !important;
    animation: 0.3s linear shadowfocus;
    // raise above other span   s so the border is not overlapped
    // position: relative;
    z-index: 1;
}

@keyframes shadowfocus {
    0% {
        box-shadow: 0px 0px 50px 11px #0000008a;
    }
    100% {
        box-shadow: 0px 0px 10px 1px #0000008a;
    }
}

.sq-current:not(.sq-first) {
    border-left-color: transparent !important;
}

.sq-current:not(.sq-last) {
    border-right-color: transparent !important;
}


// SVG highlights

rect.sq-inactive {
    fill: rgba(0,0,0,0) !important;
}

line.sq-svg {
    stroke: rgb(5, 5, 5);
    stroke-width: 2;
    stroke-dasharray: 2, 2;
}


// Tooltip injected in the iframe

.sq-selection-tooltip {

    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
    font-size: 14px;
    font-style: normal;
    font-variant: normal;
    font-weight: 400;
    line-height: 20px;
    position: fixed;
    background-color: #4c4c4c;
    color: #eee;
    padding: 0.5em;
    border-radius: 3px;
    z-index: 100000000000;

    .display {
        font-weight: bold;
    }

    .btn-list {
        display: flex;
        justify-content: center;
        margin-top: 5px;
    }

    .nav-btn {
        font-weight: bold;
        cursor: pointer;
        padding: 0 5px;
    }

    .nav-btn.disabled {
        cursor: default;
        color: #999;
    }

    .nav-btn:not(.disabled):hover {
        color: white;
    }

    button {
        background-color: #4c4c4c;
        color: #eee;
        border: 1px solid #eee;
        height: 25px;
        cursor: pointer;
        border-radius: 3px;
        font-size: 16px;
        line-height: 20px;
        white-space: nowrap;

        &:hover {
            background-color: #eee;
            color: #4c4c4c;
        }
    }

    .sq-preview-search-icon:after {
        content: 'üîç';
    }

    --left: 50%;

    &::after {
        content: " ";
        position: absolute;
        left: var(--left);
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
    }

    &.sq-bottom-tooltip::after {
        bottom: 100%; /* At the top of the tooltip */
        border-color: transparent transparent #4c4c4c transparent;
    }

    &.sq-top-tooltip::after {
        top: 100%; /* At the bottom of the tooltip */
        border-color: #4c4c4c transparent transparent transparent;
    }

    --factor: 1.0;
    zoom: var(--factor);
}

sq-passage-highlight {
    position: absolute;
    border: 2px solid #0B75FF;
    pointer-events: none;
}

// override preview .matchlocations properties now that the <b> we used to have for them
// are now with this class
span.matchlocations:not(.sq-inactive) {
    font-weight: bold;
    color: inherit !important;
    background-color: transparent !important;
}
